/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.jooq.generated.tables.daos


import app.rutherford.database.jooq.generated.tables.AuthUserRefreshToken
import app.rutherford.database.jooq.generated.tables.pojos.JAuthUserRefreshToken
import app.rutherford.database.jooq.generated.tables.records.AuthUserRefreshTokenRecord

import java.time.Instant
import java.util.UUID

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class AuthUserRefreshTokenDao(configuration: Configuration?) : DAOImpl<AuthUserRefreshTokenRecord, JAuthUserRefreshToken, UUID>(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN, JAuthUserRefreshToken::class.java, configuration) {

    /**
     * Create a new AuthUserRefreshTokenDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: JAuthUserRefreshToken): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): JAuthUserRefreshToken? = fetchOne(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, value)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: Instant?, upperInclusive: Instant?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: Instant): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: Instant?, upperInclusive: Instant?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: Instant): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.UPDATED_AT, *values)

    /**
     * Fetch records that have <code>expiration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfExpiration(lowerInclusive: Instant?, upperInclusive: Instant?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.EXPIRATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>expiration IN (values)</code>
     */
    fun fetchByExpiration(vararg values: Instant): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.EXPIRATION, *values)

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfState(lowerInclusive: String?, upperInclusive: String?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    fun fetchByState(vararg values: String): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.STATE, *values)

    /**
     * Fetch records that have <code>token_hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTokenHash(lowerInclusive: String?, upperInclusive: String?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.TOKEN_HASH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>token_hash IN (values)</code>
     */
    fun fetchByTokenHash(vararg values: String): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.TOKEN_HASH, *values)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: UUID?, upperInclusive: UUID?): List<JAuthUserRefreshToken> = fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: UUID): List<JAuthUserRefreshToken> = fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.USER_ID, *values)
}
