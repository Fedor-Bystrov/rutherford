/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.jooq.tables.daos


import app.rutherford.database.jooq.tables.AuthUser
import app.rutherford.database.jooq.tables.pojos.JAuthUser
import app.rutherford.database.jooq.tables.records.AuthUserRecord

import java.time.Instant
import java.util.UUID

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class AuthUserDao(configuration: Configuration?) : DAOImpl<AuthUserRecord, JAuthUser, UUID>(AuthUser.AUTH_USER, JAuthUser::class.java, configuration) {

    /**
     * Create a new AuthUserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: JAuthUser): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<JAuthUser> = fetch(AuthUser.AUTH_USER.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): JAuthUser? = fetchOne(AuthUser.AUTH_USER.ID, value)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: Instant?, upperInclusive: Instant?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: Instant): List<JAuthUser> = fetch(AuthUser.AUTH_USER.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: Instant?, upperInclusive: Instant?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: Instant): List<JAuthUser> = fetch(AuthUser.AUTH_USER.UPDATED_AT, *values)

    /**
     * Fetch records that have <code>last_login BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastLogin(lowerInclusive: Instant?, upperInclusive: Instant?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.LAST_LOGIN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_login IN (values)</code>
     */
    fun fetchByLastLogin(vararg values: Instant): List<JAuthUser> = fetch(AuthUser.AUTH_USER.LAST_LOGIN, *values)

    /**
     * Fetch records that have <code>application_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfApplicationName(lowerInclusive: String?, upperInclusive: String?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.APPLICATION_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>application_name IN (values)</code>
     */
    fun fetchByApplicationName(vararg values: String): List<JAuthUser> = fetch(AuthUser.AUTH_USER.APPLICATION_NAME, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<JAuthUser> = fetch(AuthUser.AUTH_USER.EMAIL, *values)

    /**
     * Fetch records that have <code>email_confirmed BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmailConfirmed(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.EMAIL_CONFIRMED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email_confirmed IN (values)</code>
     */
    fun fetchByEmailConfirmed(vararg values: Boolean): List<JAuthUser> = fetch(AuthUser.AUTH_USER.EMAIL_CONFIRMED, *values.toTypedArray())

    /**
     * Fetch records that have <code>password_hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPasswordHash(lowerInclusive: String?, upperInclusive: String?): List<JAuthUser> = fetchRange(AuthUser.AUTH_USER.PASSWORD_HASH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password_hash IN (values)</code>
     */
    fun fetchByPasswordHash(vararg values: String): List<JAuthUser> = fetch(AuthUser.AUTH_USER.PASSWORD_HASH, *values)
}
