/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.jooq.tables


import app.rutherford.database.converter.InstantConverter
import app.rutherford.database.jooq.Public
import app.rutherford.database.jooq.keys.AUTH_USER_PKEY
import app.rutherford.database.jooq.tables.records.AuthUserRecord

import java.time.Instant
import java.util.UUID
import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class AuthUser(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AuthUserRecord>?,
    aliased: Table<AuthUserRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AuthUserRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.auth_user</code>
         */
        val AUTH_USER: AuthUser = AuthUser()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuthUserRecord> = AuthUserRecord::class.java

    /**
     * The column <code>public.auth_user.id</code>.
     */
    val ID: TableField<AuthUserRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.auth_user.created_at</code>.
     */
    val CREATED_AT: TableField<AuthUserRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "", InstantConverter())

    /**
     * The column <code>public.auth_user.updated_at</code>.
     */
    val UPDATED_AT: TableField<AuthUserRecord, Instant?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "", InstantConverter())

    /**
     * The column <code>public.auth_user.last_login</code>.
     */
    val LAST_LOGIN: TableField<AuthUserRecord, Instant?> = createField(DSL.name("last_login"), SQLDataType.TIMESTAMP(6), this, "", InstantConverter())

    /**
     * The column <code>public.auth_user.application_name</code>.
     */
    val APPLICATION_NAME: TableField<AuthUserRecord, String?> = createField(DSL.name("application_name"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>public.auth_user.email</code>.
     */
    val EMAIL: TableField<AuthUserRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(320).nullable(false), this, "")

    /**
     * The column <code>public.auth_user.email_confirmed</code>.
     */
    val EMAIL_CONFIRMED: TableField<AuthUserRecord, Boolean?> = createField(DSL.name("email_confirmed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.auth_user.password_hash</code>.
     */
    val PASSWORD_HASH: TableField<AuthUserRecord, String?> = createField(DSL.name("password_hash"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AuthUserRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AuthUserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.auth_user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.auth_user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.auth_user</code> table reference
     */
    constructor(): this(DSL.name("auth_user"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AuthUserRecord>): this(Internal.createPathAlias(child, key), child, key, AUTH_USER, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<AuthUserRecord> = AUTH_USER_PKEY
    override fun `as`(alias: String): AuthUser = AuthUser(DSL.name(alias), this)
    override fun `as`(alias: Name): AuthUser = AuthUser(alias, this)
    override fun `as`(alias: Table<*>): AuthUser = AuthUser(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AuthUser = AuthUser(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AuthUser = AuthUser(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AuthUser = AuthUser(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<UUID?, Instant?, Instant?, Instant?, String?, String?, Boolean?, String?> = super.fieldsRow() as Row8<UUID?, Instant?, Instant?, Instant?, String?, String?, Boolean?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, Instant?, Instant?, Instant?, String?, String?, Boolean?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, Instant?, Instant?, Instant?, String?, String?, Boolean?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
