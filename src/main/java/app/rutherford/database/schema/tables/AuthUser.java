/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.schema.tables;


import app.rutherford.database.converter.InstantConverter;
import app.rutherford.database.schema.Keys;
import app.rutherford.database.schema.Public;
import app.rutherford.database.schema.tables.records.AuthUserRecord;

import java.time.Instant;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUser extends TableImpl<AuthUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auth_user</code>
     */
    public static final AuthUser AUTH_USER = new AuthUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthUserRecord> getRecordType() {
        return AuthUserRecord.class;
    }

    /**
     * The column <code>public.auth_user.id</code>.
     */
    public final TableField<AuthUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.auth_user.created_at</code>.
     */
    public final TableField<AuthUserRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "", new InstantConverter());

    /**
     * The column <code>public.auth_user.updated_at</code>.
     */
    public final TableField<AuthUserRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "", new InstantConverter());

    /**
     * The column <code>public.auth_user.last_login</code>.
     */
    public final TableField<AuthUserRecord, Instant> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.TIMESTAMP(6), this, "", new InstantConverter());

    /**
     * The column <code>public.auth_user.application_name</code>.
     */
    public final TableField<AuthUserRecord, String> APPLICATION_NAME = createField(DSL.name("application_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.auth_user.email</code>.
     */
    public final TableField<AuthUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(320).nullable(false), this, "");

    /**
     * The column <code>public.auth_user.email_confirmed</code>.
     */
    public final TableField<AuthUserRecord, Boolean> EMAIL_CONFIRMED = createField(DSL.name("email_confirmed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.auth_user.password_hash</code>.
     */
    public final TableField<AuthUserRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.CLOB.nullable(false), this, "");

    private AuthUser(Name alias, Table<AuthUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthUser(Name alias, Table<AuthUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.auth_user</code> table reference
     */
    public AuthUser(String alias) {
        this(DSL.name(alias), AUTH_USER);
    }

    /**
     * Create an aliased <code>public.auth_user</code> table reference
     */
    public AuthUser(Name alias) {
        this(alias, AUTH_USER);
    }

    /**
     * Create a <code>public.auth_user</code> table reference
     */
    public AuthUser() {
        this(DSL.name("auth_user"), null);
    }

    public <O extends Record> AuthUser(Table<O> child, ForeignKey<O, AuthUserRecord> key) {
        super(child, key, AUTH_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuthUserRecord> getPrimaryKey() {
        return Keys.AUTH_USER_PKEY;
    }

    @Override
    public AuthUser as(String alias) {
        return new AuthUser(DSL.name(alias), this);
    }

    @Override
    public AuthUser as(Name alias) {
        return new AuthUser(alias, this);
    }

    @Override
    public AuthUser as(Table<?> alias) {
        return new AuthUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(String name) {
        return new AuthUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(Name name) {
        return new AuthUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(Table<?> name) {
        return new AuthUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, Instant, Instant, Instant, String, String, Boolean, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super Instant, ? super Instant, ? super Instant, ? super String, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super Instant, ? super Instant, ? super Instant, ? super String, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
