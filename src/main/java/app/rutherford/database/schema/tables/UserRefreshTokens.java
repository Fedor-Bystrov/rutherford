/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.schema.tables;


import app.rutherford.database.converter.InstantConverter;
import app.rutherford.database.schema.Indexes;
import app.rutherford.database.schema.Keys;
import app.rutherford.database.schema.Public;
import app.rutherford.database.schema.tables.records.UserRefreshTokensRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRefreshTokens extends TableImpl<UserRefreshTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_refresh_tokens</code>
     */
    public static final UserRefreshTokens USER_REFRESH_TOKENS = new UserRefreshTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRefreshTokensRecord> getRecordType() {
        return UserRefreshTokensRecord.class;
    }

    /**
     * The column <code>public.user_refresh_tokens.id</code>.
     */
    public final TableField<UserRefreshTokensRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_refresh_tokens.created_at</code>.
     */
    public final TableField<UserRefreshTokensRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "", new InstantConverter());

    /**
     * The column <code>public.user_refresh_tokens.updated_at</code>.
     */
    public final TableField<UserRefreshTokensRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMP)), this, "", new InstantConverter());

    /**
     * The column <code>public.user_refresh_tokens.expiration</code>.
     */
    public final TableField<UserRefreshTokensRecord, Instant> EXPIRATION = createField(DSL.name("expiration"), SQLDataType.TIMESTAMP(6), this, "", new InstantConverter());

    /**
     * The column <code>public.user_refresh_tokens.state</code>.
     */
    public final TableField<UserRefreshTokensRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.user_refresh_tokens.token_hash</code>.
     */
    public final TableField<UserRefreshTokensRecord, String> TOKEN_HASH = createField(DSL.name("token_hash"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_refresh_tokens.user_id</code>.
     */
    public final TableField<UserRefreshTokensRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    private UserRefreshTokens(Name alias, Table<UserRefreshTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRefreshTokens(Name alias, Table<UserRefreshTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_refresh_tokens</code> table reference
     */
    public UserRefreshTokens(String alias) {
        this(DSL.name(alias), USER_REFRESH_TOKENS);
    }

    /**
     * Create an aliased <code>public.user_refresh_tokens</code> table reference
     */
    public UserRefreshTokens(Name alias) {
        this(alias, USER_REFRESH_TOKENS);
    }

    /**
     * Create a <code>public.user_refresh_tokens</code> table reference
     */
    public UserRefreshTokens() {
        this(DSL.name("user_refresh_tokens"), null);
    }

    public <O extends Record> UserRefreshTokens(Table<O> child, ForeignKey<O, UserRefreshTokensRecord> key) {
        super(child, key, USER_REFRESH_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_REFRESH_TOKENS_TOKEN_HASH_IDX);
    }

    @Override
    public UniqueKey<UserRefreshTokensRecord> getPrimaryKey() {
        return Keys.USER_REFRESH_TOKENS_PKEY;
    }

    @Override
    public List<ForeignKey<UserRefreshTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_REFRESH_TOKENS__USER_REFRESH_TOKENS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USER_REFRESH_TOKENS__USER_REFRESH_TOKENS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public UserRefreshTokens as(String alias) {
        return new UserRefreshTokens(DSL.name(alias), this);
    }

    @Override
    public UserRefreshTokens as(Name alias) {
        return new UserRefreshTokens(alias, this);
    }

    @Override
    public UserRefreshTokens as(Table<?> alias) {
        return new UserRefreshTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRefreshTokens rename(String name) {
        return new UserRefreshTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRefreshTokens rename(Name name) {
        return new UserRefreshTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRefreshTokens rename(Table<?> name) {
        return new UserRefreshTokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Instant, Instant, Instant, String, String, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super Instant, ? super Instant, ? super Instant, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super Instant, ? super Instant, ? super Instant, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
