/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.schema.tables.daos;


import app.rutherford.database.schema.tables.AuthUser;
import app.rutherford.database.schema.tables.records.AuthUserRecord;

import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUserDao extends DAOImpl<AuthUserRecord, app.rutherford.database.schema.tables.pojos.AuthUser, UUID> {

    /**
     * Create a new AuthUserDao without any configuration
     */
    public AuthUserDao() {
        super(AuthUser.AUTH_USER, app.rutherford.database.schema.tables.pojos.AuthUser.class);
    }

    /**
     * Create a new AuthUserDao with an attached configuration
     */
    public AuthUserDao(Configuration configuration) {
        super(AuthUser.AUTH_USER, app.rutherford.database.schema.tables.pojos.AuthUser.class, configuration);
    }

    @Override
    public UUID getId(app.rutherford.database.schema.tables.pojos.AuthUser object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchById(UUID... values) {
        return fetch(AuthUser.AUTH_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public app.rutherford.database.schema.tables.pojos.AuthUser fetchOneById(UUID value) {
        return fetchOne(AuthUser.AUTH_USER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<app.rutherford.database.schema.tables.pojos.AuthUser> fetchOptionalById(UUID value) {
        return fetchOptional(AuthUser.AUTH_USER.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfCreatedAt(Instant lowerInclusive, Instant upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByCreatedAt(Instant... values) {
        return fetch(AuthUser.AUTH_USER.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfUpdatedAt(Instant lowerInclusive, Instant upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByUpdatedAt(Instant... values) {
        return fetch(AuthUser.AUTH_USER.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>last_login BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfLastLogin(Instant lowerInclusive, Instant upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.LAST_LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByLastLogin(Instant... values) {
        return fetch(AuthUser.AUTH_USER.LAST_LOGIN, values);
    }

    /**
     * Fetch records that have <code>application_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfApplicationName(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.APPLICATION_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>application_name IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByApplicationName(String... values) {
        return fetch(AuthUser.AUTH_USER.APPLICATION_NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByEmail(String... values) {
        return fetch(AuthUser.AUTH_USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>email_confirmed BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfEmailConfirmed(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.EMAIL_CONFIRMED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email_confirmed IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByEmailConfirmed(Boolean... values) {
        return fetch(AuthUser.AUTH_USER.EMAIL_CONFIRMED, values);
    }

    /**
     * Fetch records that have <code>password_hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchRangeOfPasswordHash(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthUser.AUTH_USER.PASSWORD_HASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password_hash IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUser> fetchByPasswordHash(String... values) {
        return fetch(AuthUser.AUTH_USER.PASSWORD_HASH, values);
    }
}
