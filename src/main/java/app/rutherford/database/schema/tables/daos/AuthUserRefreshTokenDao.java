/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.schema.tables.daos;


import app.rutherford.database.schema.tables.AuthUserRefreshToken;
import app.rutherford.database.schema.tables.records.AuthUserRefreshTokenRecord;

import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUserRefreshTokenDao extends DAOImpl<AuthUserRefreshTokenRecord, app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken, UUID> {

    /**
     * Create a new AuthUserRefreshTokenDao without any configuration
     */
    public AuthUserRefreshTokenDao() {
        super(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN, app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken.class);
    }

    /**
     * Create a new AuthUserRefreshTokenDao with an attached configuration
     */
    public AuthUserRefreshTokenDao(Configuration configuration) {
        super(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN, app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken.class, configuration);
    }

    @Override
    public UUID getId(app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchById(UUID... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken fetchOneById(UUID value) {
        return fetchOne(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchOptionalById(UUID value) {
        return fetchOptional(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.ID, value);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfCreatedAt(Instant lowerInclusive, Instant upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchByCreatedAt(Instant... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfUpdatedAt(Instant lowerInclusive, Instant upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchByUpdatedAt(Instant... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>expiration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfExpiration(Instant lowerInclusive, Instant upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.EXPIRATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>expiration IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchByExpiration(Instant... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.EXPIRATION, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchByState(String... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.STATE, values);
    }

    /**
     * Fetch records that have <code>token_hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfTokenHash(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.TOKEN_HASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token_hash IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchByTokenHash(String... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.TOKEN_HASH, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<app.rutherford.database.schema.tables.pojos.AuthUserRefreshToken> fetchByUserId(UUID... values) {
        return fetch(AuthUserRefreshToken.AUTH_USER_REFRESH_TOKEN.USER_ID, values);
    }
}
