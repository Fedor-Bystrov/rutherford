/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.schema.tables.records;


import app.rutherford.database.schema.tables.UserRefreshTokens;

import java.time.Instant;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRefreshTokensRecord extends UpdatableRecordImpl<UserRefreshTokensRecord> implements Record7<UUID, Instant, Instant, Instant, String, String, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_refresh_tokens.id</code>.
     */
    public UserRefreshTokensRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.user_refresh_tokens.created_at</code>.
     */
    public UserRefreshTokensRecord setCreatedAt(Instant value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.created_at</code>.
     */
    public Instant getCreatedAt() {
        return (Instant) get(1);
    }

    /**
     * Setter for <code>public.user_refresh_tokens.updated_at</code>.
     */
    public UserRefreshTokensRecord setUpdatedAt(Instant value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.updated_at</code>.
     */
    public Instant getUpdatedAt() {
        return (Instant) get(2);
    }

    /**
     * Setter for <code>public.user_refresh_tokens.expiration</code>.
     */
    public UserRefreshTokensRecord setExpiration(Instant value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.expiration</code>.
     */
    public Instant getExpiration() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>public.user_refresh_tokens.state</code>.
     */
    public UserRefreshTokensRecord setState(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.state</code>.
     */
    public String getState() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.user_refresh_tokens.token_hash</code>.
     */
    public UserRefreshTokensRecord setTokenHash(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.token_hash</code>.
     */
    public String getTokenHash() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.user_refresh_tokens.user_id</code>.
     */
    public UserRefreshTokensRecord setUserId(UUID value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.user_refresh_tokens.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Instant, Instant, Instant, String, String, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, Instant, Instant, Instant, String, String, UUID> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.ID;
    }

    @Override
    public Field<Instant> field2() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.CREATED_AT;
    }

    @Override
    public Field<Instant> field3() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.UPDATED_AT;
    }

    @Override
    public Field<Instant> field4() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.EXPIRATION;
    }

    @Override
    public Field<String> field5() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.STATE;
    }

    @Override
    public Field<String> field6() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.TOKEN_HASH;
    }

    @Override
    public Field<UUID> field7() {
        return UserRefreshTokens.USER_REFRESH_TOKENS.USER_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public Instant component2() {
        return getCreatedAt();
    }

    @Override
    public Instant component3() {
        return getUpdatedAt();
    }

    @Override
    public Instant component4() {
        return getExpiration();
    }

    @Override
    public String component5() {
        return getState();
    }

    @Override
    public String component6() {
        return getTokenHash();
    }

    @Override
    public UUID component7() {
        return getUserId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public Instant value2() {
        return getCreatedAt();
    }

    @Override
    public Instant value3() {
        return getUpdatedAt();
    }

    @Override
    public Instant value4() {
        return getExpiration();
    }

    @Override
    public String value5() {
        return getState();
    }

    @Override
    public String value6() {
        return getTokenHash();
    }

    @Override
    public UUID value7() {
        return getUserId();
    }

    @Override
    public UserRefreshTokensRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord value2(Instant value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord value3(Instant value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord value4(Instant value) {
        setExpiration(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord value5(String value) {
        setState(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord value6(String value) {
        setTokenHash(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord value7(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRefreshTokensRecord values(UUID value1, Instant value2, Instant value3, Instant value4, String value5, String value6, UUID value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRefreshTokensRecord
     */
    public UserRefreshTokensRecord() {
        super(UserRefreshTokens.USER_REFRESH_TOKENS);
    }

    /**
     * Create a detached, initialised UserRefreshTokensRecord
     */
    public UserRefreshTokensRecord(UUID id, Instant createdAt, Instant updatedAt, Instant expiration, String state, String tokenHash, UUID userId) {
        super(UserRefreshTokens.USER_REFRESH_TOKENS);

        setId(id);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setExpiration(expiration);
        setState(state);
        setTokenHash(tokenHash);
        setUserId(userId);
    }

    /**
     * Create a detached, initialised UserRefreshTokensRecord
     */
    public UserRefreshTokensRecord(app.rutherford.database.schema.tables.pojos.UserRefreshTokens value) {
        super(UserRefreshTokens.USER_REFRESH_TOKENS);

        if (value != null) {
            setId(value.getId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setExpiration(value.getExpiration());
            setState(value.getState());
            setTokenHash(value.getTokenHash());
            setUserId(value.getUserId());
        }
    }
}
