/*
 * This file is generated by jOOQ.
 */
package app.rutherford.database.schema.tables.pojos;


import java.io.Serializable;
import java.time.Instant;
import java.util.UUID;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6",
        "schema version:public_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUser implements Serializable {

    private static final long serialVersionUID = 1L;

    private UUID id;
    private Instant createdAt;
    private Instant updatedAt;
    private Instant lastLogin;
    private String applicationName;
    private String email;
    private Boolean emailConfirmed;
    private String passwordHash;

    public AuthUser() {}

    public AuthUser(AuthUser value) {
        this.id = value.id;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.lastLogin = value.lastLogin;
        this.applicationName = value.applicationName;
        this.email = value.email;
        this.emailConfirmed = value.emailConfirmed;
        this.passwordHash = value.passwordHash;
    }

    public AuthUser(
        UUID id,
        Instant createdAt,
        Instant updatedAt,
        Instant lastLogin,
        String applicationName,
        String email,
        Boolean emailConfirmed,
        String passwordHash
    ) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.lastLogin = lastLogin;
        this.applicationName = applicationName;
        this.email = email;
        this.emailConfirmed = emailConfirmed;
        this.passwordHash = passwordHash;
    }

    /**
     * Getter for <code>public.auth_user.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.auth_user.id</code>.
     */
    public AuthUser setId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.created_at</code>.
     */
    public Instant getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>public.auth_user.created_at</code>.
     */
    public AuthUser setCreatedAt(Instant createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.updated_at</code>.
     */
    public Instant getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>public.auth_user.updated_at</code>.
     */
    public AuthUser setUpdatedAt(Instant updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.last_login</code>.
     */
    public Instant getLastLogin() {
        return this.lastLogin;
    }

    /**
     * Setter for <code>public.auth_user.last_login</code>.
     */
    public AuthUser setLastLogin(Instant lastLogin) {
        this.lastLogin = lastLogin;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.application_name</code>.
     */
    public String getApplicationName() {
        return this.applicationName;
    }

    /**
     * Setter for <code>public.auth_user.application_name</code>.
     */
    public AuthUser setApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.email</code>.
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Setter for <code>public.auth_user.email</code>.
     */
    public AuthUser setEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.email_confirmed</code>.
     */
    public Boolean getEmailConfirmed() {
        return this.emailConfirmed;
    }

    /**
     * Setter for <code>public.auth_user.email_confirmed</code>.
     */
    public AuthUser setEmailConfirmed(Boolean emailConfirmed) {
        this.emailConfirmed = emailConfirmed;
        return this;
    }

    /**
     * Getter for <code>public.auth_user.password_hash</code>.
     */
    public String getPasswordHash() {
        return this.passwordHash;
    }

    /**
     * Setter for <code>public.auth_user.password_hash</code>.
     */
    public AuthUser setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AuthUser other = (AuthUser) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.lastLogin == null) {
            if (other.lastLogin != null)
                return false;
        }
        else if (!this.lastLogin.equals(other.lastLogin))
            return false;
        if (this.applicationName == null) {
            if (other.applicationName != null)
                return false;
        }
        else if (!this.applicationName.equals(other.applicationName))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.emailConfirmed == null) {
            if (other.emailConfirmed != null)
                return false;
        }
        else if (!this.emailConfirmed.equals(other.emailConfirmed))
            return false;
        if (this.passwordHash == null) {
            if (other.passwordHash != null)
                return false;
        }
        else if (!this.passwordHash.equals(other.passwordHash))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.lastLogin == null) ? 0 : this.lastLogin.hashCode());
        result = prime * result + ((this.applicationName == null) ? 0 : this.applicationName.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        result = prime * result + ((this.emailConfirmed == null) ? 0 : this.emailConfirmed.hashCode());
        result = prime * result + ((this.passwordHash == null) ? 0 : this.passwordHash.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AuthUser (");

        sb.append(id);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(lastLogin);
        sb.append(", ").append(applicationName);
        sb.append(", ").append(email);
        sb.append(", ").append(emailConfirmed);
        sb.append(", ").append(passwordHash);

        sb.append(")");
        return sb.toString();
    }
}
